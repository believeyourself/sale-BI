[{"D:\\operatingPlatform\\admin-console-marketing\\src\\index.js":"1","D:\\operatingPlatform\\admin-console-marketing\\src\\reportWebVitals.js":"2","D:\\operatingPlatform\\admin-console-marketing\\src\\App.js":"3","D:\\operatingPlatform\\admin-console-marketing\\src\\views\\login\\index.jsx":"4","D:\\operatingPlatform\\admin-console-marketing\\src\\views\\home\\index.jsx":"5","D:\\operatingPlatform\\admin-console-marketing\\src\\components\\contactUs\\index.jsx":"6","D:\\operatingPlatform\\admin-console-marketing\\src\\config\\config.js":"7","D:\\operatingPlatform\\admin-console-marketing\\src\\utils\\request.js":"8","D:\\operatingPlatform\\admin-console-marketing\\src\\views\\invite\\index.jsx":"9","D:\\operatingPlatform\\admin-console-marketing\\src\\views\\cashInfo\\index.jsx":"10","D:\\operatingPlatform\\admin-console-marketing\\src\\views\\download\\index.jsx":"11"},{"size":500,"mtime":1606809737326,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":735,"mtime":1608017854296,"results":"15","hashOfConfig":"13"},{"size":4222,"mtime":1608020624777,"results":"16","hashOfConfig":"13"},{"size":9571,"mtime":1608020624774,"results":"17","hashOfConfig":"13"},{"size":1139,"mtime":1607335764893,"results":"18","hashOfConfig":"13"},{"size":1044,"mtime":1608020624773,"results":"19","hashOfConfig":"13"},{"size":720,"mtime":1607515560769,"results":"20","hashOfConfig":"13"},{"size":2928,"mtime":1607515291515,"results":"21","hashOfConfig":"13"},{"size":2199,"mtime":1607510521050,"results":"22","hashOfConfig":"13"},{"size":1668,"mtime":1608105992585,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"a5ho9n",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\operatingPlatform\\admin-console-marketing\\src\\index.js",[],["50","51"],"D:\\operatingPlatform\\admin-console-marketing\\src\\reportWebVitals.js",[],"D:\\operatingPlatform\\admin-console-marketing\\src\\App.js",[],"D:\\operatingPlatform\\admin-console-marketing\\src\\views\\login\\index.jsx",["52"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Flex, Toast, WhiteSpace } from \"antd-mobile\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport iconUrl from \"../../assets/icon.png\";\r\nimport loginUrl from \"../../assets/login.png\";\r\nimport \"./index.css\";\r\nimport request from \"../../utils/request\";\r\n\r\nexport default function Login(props) {\r\n    let { match } = props;\r\n    let base64UserInfo = decodeURIComponent(match.params?.userInfo);\r\n    const [loading, setLoading] = useState(false);\r\n    const [isLogin, setIsLogin] = useState(false);\r\n    const [userInfo, setUserInfo] = useState({});\r\n    useEffect(() => {\r\n        (function (d, s, id) {\r\n            var js, fjs = d.getElementsByTagName(s)[0];\r\n            if (d.getElementById(id)) { return; }\r\n            js = d.createElement(s); js.id = id;\r\n            js.src = \"https://connect.facebook.net/en_US/sdk.js\";\r\n            fjs.parentNode.insertBefore(js, fjs);\r\n        }(document, 'script', 'facebook-jssdk'));\r\n\r\n        window.fbAsyncInit = () => {\r\n            window.FB?.init({\r\n                appId: \"1026987934476519\",\r\n                cookie: true,\r\n                xfbml: true,\r\n                version: \"v9.0\",\r\n            });\r\n        };\r\n\r\n        window.analytics.logEvent(\"enter_login_page\");\r\n    }, []);\r\n\r\n    const queryData = async () => {\r\n        setLoading(true);\r\n        if (!base64UserInfo) {\r\n            Toast.fail(\"invalid params!\");\r\n            return;\r\n        }\r\n\r\n        let { data } = await request.post(\"/marketing/infoVerify\", base64UserInfo);\r\n\r\n        if (data?.facebookBound) {\r\n            setIsLogin(true);\r\n        }\r\n        setUserInfo({\r\n            accountId: data.accountId,\r\n            platform: data.platform\r\n        });\r\n        setLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        queryData();\r\n    }, []);\r\n\r\n\r\n\r\n    function handleFbLogin() {\r\n        setLoading(true);\r\n        window.analytics.logEvent(\"click_fb_login\");\r\n        window.FB?.login(function ({ authResponse, status }) {\r\n            if (status === 'connected') {\r\n                let params = {\r\n                    accountId: userInfo.accountId,\r\n                    userId: authResponse.userID,\r\n                    type: \"Facebook\",\r\n                    appId: \"1026987934476519\",\r\n                    token: authResponse.accessToken,\r\n                    userName: \"\",\r\n                    platform: userInfo.platform,\r\n                    boundDevice: userInfo.platform,\r\n                    originalMessage: JSON.stringify(authResponse)\r\n                }\r\n                window.FB.api('/me', async (response) => {\r\n                    params.userName = response.name;\r\n                    let { data } = await request.post(\"/thirdPartyUser/bind\", params);\r\n                    if (data.accountId) {\r\n                        window.analytics.logEvent(\"click_fb_login_success\");\r\n                        setIsLogin(true);\r\n                    }\r\n                });\r\n            } else {\r\n                window.analytics.logEvent(\"click_fb_login_failed\");\r\n                Toast.Fail('facebook login failed!');\r\n            }\r\n            setLoading(false);\r\n        }, { scope: 'public_profile,email' });\r\n    }\r\n\r\n    //已经绑定了facebook就跳过登录\r\n    if (isLogin) {\r\n        return <Redirect to={`/home/${base64UserInfo}`} />\r\n    }\r\n\r\n    return (\r\n        <Flex align=\"center\" justify=\"center\" className=\"login\" direction=\"column\">\r\n            <img alt=\"\" height=\"120\" src={iconUrl} />\r\n            <WhiteSpace size=\"xl\"></WhiteSpace>\r\n            <h2>INVITE AND</h2>\r\n            <h1>RECEIVE</h1>\r\n            <h1 className=\"money\">CASH PRIZE</h1>\r\n            <p>Invite 3 friends for <span style={{ color: \"#116aad\" }}>$1</span>.<br />10 friends for <span style={{ color: \"#116aad\" }}>$4</span>.</p>\r\n            <Button\r\n                style={{\r\n                    width: \"70vw\",\r\n                    backgroundImage: `url(${loginUrl})`,\r\n                    backgroundSize: \"100% 100%\"\r\n                }}\r\n                onClick={handleFbLogin}\r\n                disabled={loading}\r\n                loading={loading}>\r\n            </Button>\r\n        </Flex>\r\n    )\r\n}","D:\\operatingPlatform\\admin-console-marketing\\src\\views\\home\\index.jsx",["53","54"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { WhiteSpace, Button, Flex, Toast, Badge, Carousel } from \"antd-mobile\";\r\nimport ContactUs from \"../../components/contactUs\";\r\nimport request from \"../../utils/request\";\r\n\r\n\r\n//图片\r\nimport inviteBannerUrl from \"../../assets/invite_banner.jpg\";\r\nimport playImg from \"../../assets/play.png\";\r\nimport userUrl from \"../../assets/user.jpg\";\r\nimport fbUrl from \"../../assets/facebook.png\";\r\nimport inviteUrl from \"../../assets/invite.png\";\r\nimport arcadepusher_assets_0 from \"../../assets/arcadepusher_assets_0.png\";\r\nimport arcadepusher_assets_1 from \"../../assets/arcadepusher_assets_1.png\";\r\nimport arcadepusher_assets_2 from \"../../assets/arcadepusher_assets_2.png\";\r\nimport bingooo_assets_02 from \"../../assets/binggo_assets_0.png\";\r\nimport bingooo_assets_01 from \"../../assets/binggo_assets_1.png\";\r\nimport arcadePusherIcon from \"../../assets/arcadePusher.png\"\r\nimport slotsGoIcon from \"../../assets/slotsgo_icon.png\";\r\nimport plinkoGoIcon from \"../../assets/plinkogo_icon.png\";\r\nimport bingGoIcon from \"../../assets/binggo_icon.png\";\r\nimport candyPusherIcon from \"../../assets/candypusher_icon.png\";\r\nimport plinkoManiaIcon from \"../../assets/plinkomania_icon.png\";\r\nimport slotsGoBanner from \"../../assets/slotsgo_banner.jpg\";\r\nimport arcadePusherBanner from \"../../assets/arcadepusher_banner.jpg\";\r\nimport plinkoGoBanner from \"../../assets/plinkogo_banner.jpg\";\r\nimport bingGoBanner from \"../../assets/binggo_banner.jpg\";\r\nimport plinkomaniaBanner from \"../../assets/plinkomania_banner.jpg\";\r\nimport candyPusherBanner from \"../../assets/candypusher_banner.jpg\";\r\nimport videoMp4 from \"../../assets/redeem.mp4\";\r\nimport \"./index.css\";\r\n\r\nconst ASSETS_IMAGE = {\r\n    arcadepusher_assets_0,\r\n    arcadepusher_assets_1,\r\n    arcadepusher_assets_2,\r\n    bingooo_assets_02,\r\n    bingooo_assets_01,\r\n}\r\n\r\nconst GAME_ICON = {\r\n    arcadepusher: arcadePusherIcon,\r\n    slotsgo: slotsGoIcon,\r\n    plinkomania: plinkoManiaIcon,\r\n    plinkogo: plinkoGoIcon,\r\n    bingooo: bingGoIcon,\r\n}\r\n\r\nconst HOT_GAMES = [\r\n    {\r\n        icon: arcadePusherIcon,\r\n        name: \"arcadePusher\",\r\n        banner: arcadePusherBanner,\r\n        text: \"\"\r\n    },\r\n    {\r\n        icon: slotsGoIcon,\r\n        name: \"slotsGo\",\r\n        banner: slotsGoBanner,\r\n        text: \"\"\r\n    },\r\n    {\r\n        icon: candyPusherIcon,\r\n        name: \"candyPusher\",\r\n        banner: candyPusherBanner,\r\n        text: \"\"\r\n    },\r\n    {\r\n        icon: plinkoManiaIcon,\r\n        name: \"plinkoMania\",\r\n        banner: plinkomaniaBanner,\r\n        text: \"\"\r\n    },\r\n    {\r\n        icon: plinkoGoIcon,\r\n        name: \"plinkoGo\",\r\n        banner: plinkoGoBanner,\r\n        text: \"\"\r\n    },\r\n    {\r\n        icon: bingGoIcon,\r\n        name: \"bingooo\",\r\n        banner: bingGoBanner,\r\n        text: \"\"\r\n    }\r\n]\r\n\r\nexport default function Home(props) {\r\n    let { match } = props;\r\n    let base64UserInfo = match.params?.userInfo;\r\n    const videoRef = useRef(null);\r\n    const videoContainerRef = useRef(null);\r\n    const [userInfo, setUserInfo] = useState({\r\n        appName: \"\",\r\n        assets: []\r\n    });\r\n    const [processInfo, setProcessInfo] = useState({\r\n        currentValue: 0,\r\n        name: \"--\",\r\n    });\r\n\r\n    const queryData = async () => {\r\n        if (!base64UserInfo) {\r\n            Toast.fail(\"invalid params!\");\r\n            return;\r\n        }\r\n\r\n        Toast.loading(\"Loading...\", 30);\r\n        let { data: userInfo } = await request.post(\"/marketing/infoVerify\", base64UserInfo);\r\n\r\n        let { data: processInfo } = await request.get(`/marketing/campaigns?accountId=${userInfo.accountId}&appName=${userInfo.appName}`);\r\n\r\n        setUserInfo(userInfo);\r\n        setProcessInfo(processInfo);\r\n        Toast.hide();\r\n    };\r\n\r\n    useEffect(() => {\r\n        queryData();\r\n    }, []);\r\n\r\n    const goToInvite = () => {\r\n        window.analytics.logEvent(\"click_invite\");\r\n        window.location.hash = `#/invite/${btoa(processInfo.promotionalLink)}`;\r\n    }\r\n    const goToDownload = (appName) => {\r\n        window.analytics.logEvent(`click_${appName}_download`);\r\n        window.location.hash = `#/download/${appName}`;\r\n    }\r\n\r\n    const showVideo = () => {\r\n        videoContainerRef.current.style.display = \"block\";\r\n        videoRef.current.play();\r\n    }\r\n\r\n    const hideVideo = () => {\r\n        videoContainerRef.current.style.display = \"none\";\r\n        videoRef.current.pause();\r\n    }\r\n\r\n    //拉新进度展示\r\n    let avatars = [];\r\n    let avatarNode = null;\r\n    let invites = [];\r\n    let avatarCount = processInfo.currentValue;\r\n    for (let i = 0; i < avatarCount; ++i) {\r\n        if (i < 6) {\r\n            avatars.push(<img key={\"avatar\" + i} alt=\"\" className=\"avatar user_invited\" src={userUrl} />);\r\n        } else {\r\n            invites.push(<img key={\"avatar\" + i} alt=\"\" className=\"avatar\" src={userUrl} />);\r\n        }\r\n    }\r\n\r\n    if (avatars.length > 0) {\r\n        avatarNode = <Badge style={{\r\n            position: \"absolute\",\r\n            right: -3 * avatars.length + \"px\",\r\n            top: \"1px\",\r\n        }} text={avatars.length}><div className=\"invited_avatar\">{avatars}</div></Badge>;\r\n    }\r\n\r\n    let inviteCount = 10 - avatarCount;\r\n    let inviteImgCount = avatarCount > 0 ? 4 : 5\r\n    for (let i = 0; i < inviteCount && i < inviteImgCount; ++i) {\r\n        invites.push(<img onClick={goToInvite} key={\"invite\" + i} alt=\"\" className=\"avatar user_invite\" src={inviteUrl} />)\r\n    }\r\n\r\n    //游戏资产\r\n    let assets = [];\r\n\r\n    for (let i = 0; i < userInfo.assets.length; ++i) {\r\n        let asset = userInfo.assets[i];\r\n        let button = (<Button disabled className=\"cash_out_button\" size=\"small\">CASH OUT</Button>);\r\n        if (asset.currentValue >= asset.targetValue) {\r\n            button = (<Button className=\"cash_out_button\" size=\"small\">CASH OUT</Button>);\r\n        }\r\n\r\n        assets.push((<Flex key={`${userInfo.appName}_assets_${asset.code}`} justify=\"start\">\r\n            <Flex.Item>\r\n                <Flex>\r\n                    <img alt=\"\" src={ASSETS_IMAGE[`${userInfo.appName.toLowerCase()}_assets_${asset.code}`]}></img>\r\n                    <span style={{ marginLeft: \"8px\" }}>{asset.value} / {asset.targetValue}</span>\r\n                </Flex>\r\n            </Flex.Item>\r\n            {button}\r\n        </Flex>));\r\n    }\r\n\r\n    //hot games\r\n    let hotGames = [];\r\n    let banners = [];\r\n    for (let i = 0; i < HOT_GAMES.length; ++i) {\r\n        let game = HOT_GAMES[i];\r\n        if (game.name?.toLowerCase() !== userInfo.appName?.toLowerCase()) {\r\n            banners.push(<img key={game.name} onClick={() => goToDownload(\"slotsGo\")} alt=\"\" src={game.banner} />)\r\n            hotGames.push(<React.Fragment key={game.name}>\r\n                <WhiteSpace></WhiteSpace>\r\n                <Flex className=\"user_game\" justify=\"start\">\r\n                    <img alt=\"\" className=\"avatar\" src={game.icon} />\r\n                    <Flex.Item>\r\n                        <p>{game.name}</p>\r\n                        <p>{game.text}</p>\r\n                    </Flex.Item>\r\n                    <Button size=\"small\" onClick={() => goToDownload(game.name)} className=\"play_button\">PLAY NOW</Button>\r\n                </Flex>\r\n            </React.Fragment>)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <img className=\"play_video_btn\" onClick={showVideo} src={playImg} />\r\n            <div ref={videoContainerRef} className=\"redeem_video\">\r\n                <span onClick={hideVideo} className=\"close_icon\">X</span>\r\n                <video\r\n                    controls\r\n                    ref={videoRef}\r\n                    src={videoMp4}>\r\n                </video>\r\n            </div>\r\n            <img onClick={goToInvite} alt=\"\" src={inviteBannerUrl} />\r\n            <WhiteSpace></WhiteSpace>\r\n            <Flex className=\"process\" justify=\"around\">\r\n                {avatarNode}\r\n                <Flex justify=\"around\">{invites}</Flex>\r\n            </Flex>\r\n            <h3 style={{ paddingLeft: \"15px\", textAlign: \"left\" }}>My Games</h3>\r\n            <Flex className=\"user_game\" justify=\"start\">\r\n                <img alt=\"\" className=\"avatar\" src={GAME_ICON[userInfo.appName.toLowerCase()]} />\r\n                <Flex.Item>\r\n                    <span>{userInfo.appName}</span>\r\n                </Flex.Item>\r\n                {\r\n                    processInfo.canCashOut ?\r\n                        <Button type=\"link\" href={`#/cashInfo/${processInfo.stage}/${processInfo.userCampaignId}`} size=\"small\" className=\"cash_out_button\">CASH OUT</Button>\r\n                        :\r\n                        <Button onClick={goToInvite} size=\"small\" className=\"play_button\">INVITE</Button>\r\n                }\r\n            </Flex>\r\n            <WhiteSpace></WhiteSpace>\r\n            <section className=\"user\">\r\n                <Flex justify=\"start\">\r\n                    <img alt=\"\" className=\"avatar\" src={fbUrl} />\r\n                    <Flex.Item>\r\n                        <span>{processInfo.name}</span>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                <WhiteSpace></WhiteSpace>\r\n                {assets}\r\n            </section>\r\n            <h3 style={{ paddingLeft: \"15px\", textAlign: \"left\" }}>Hot Games</h3>\r\n            <WhiteSpace></WhiteSpace>\r\n            <Carousel className=\"hot_game_banner_container\"\r\n                autoplay\r\n                infinite\r\n            >\r\n                {banners}\r\n            </Carousel>\r\n            {hotGames}\r\n            <ContactUs></ContactUs>\r\n        </div >\r\n    )\r\n}","D:\\operatingPlatform\\admin-console-marketing\\src\\components\\contactUs\\index.jsx",[],"D:\\operatingPlatform\\admin-console-marketing\\src\\config\\config.js",[],"D:\\operatingPlatform\\admin-console-marketing\\src\\utils\\request.js",[],"D:\\operatingPlatform\\admin-console-marketing\\src\\views\\invite\\index.jsx",["55"],"import React, { useRef } from \"react\";\r\nimport { Button, Toast, NavBar } from \"antd-mobile\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport backImg from \"../../assets/back.png\";\r\nimport \"./index.css\";\r\n\r\nconst info = [\r\n    \"Invite friends to download, gain cash right now!\",\r\n    \"Help! Without you, I can't cash out $1 for free.\",\r\n    \"$1 is waiting for you, download right now!\",\r\n    \"Funny Game, and gain $1 easily.\",\r\n    \"An easy way to earn $1.\",\r\n    \"Just for 1 minute and gain $1!\",\r\n    \"The most fastest way to earn $1!\",\r\n    \"Hey guys, a quick way to earn $1,download this funny game.\",\r\n    \"OMG, $1 is so easy to get，I'm about to cash out, don't you wanna have a try!\",\r\n    \"Everyone is playing, everyone is withdrawing, what are you waiting for, hurry up and download right now~\",\r\n];\r\n\r\nconst Invite = (props) => {\r\n    const emailContent = `Hi,How is it going？I'm playing the so funny game and need you help right now!Just help me download this game thorough the link and I can gain $1 immediately!%0dClick the link！👇👇👇(If link is not clickable, please copy and paste it into the address bar)%0d`;\r\n    const shareUrl = atob(props.match.params.shareUrl);\r\n    const randomIndex = Math.floor(Math.random() * info.length);\r\n    const emailTitleIndex = Math.floor(Math.random() * 8);\r\n    const randomInfo = info[randomIndex];\r\n    const randomEmailTitle = info[emailTitleIndex];\r\n\r\n    const copyUrl = () => {\r\n        window.analytics.logEvent(\"click_copy_url\");\r\n        copy(`${randomInfo} Click the link！👇👇👇\\n${shareUrl}`);\r\n        Toast.success(\"Copy Success!Invite your best friends and win real money!\");\r\n    }\r\n\r\n    let shareButton = null;\r\n    if (window.navigator.share) {\r\n        shareButton = (<React.Fragment>\r\n            <Button onClick={copyUrl}>Copy Link</Button>\r\n            <Button onClick={navigator.share({\r\n                title: randomEmailTitle,\r\n                url: shareUrl\r\n            }).then(() => {\r\n            })} className=\"copy_link\">Share</Button>\r\n        </React.Fragment>);\r\n    } else {\r\n        shareButton = (<React.Fragment>\r\n            <Button onClick={copyUrl}>Copy Link</Button>\r\n            <Button\r\n                type=\"link\"\r\n                onClick={window.analytics.logEvent(\"click_share_with_email\")}\r\n                href={`mailto:?subject=${randomEmailTitle}&body=${emailContent}${shareUrl}`}>\r\n                Share With Email\r\n            </Button>\r\n        </React.Fragment>);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <NavBar\r\n                icon={<img className=\"back\" alt=\"back\" src={backImg}></img>}\r\n                style={{ backgroundColor: \"#FFF\" }}\r\n                onLeftClick={() => window.history.back(-1)}\r\n            />\r\n            <div className=\"invite\"></div>\r\n            <div className=\"share\">{shareButton}</div>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default Invite;","D:\\operatingPlatform\\admin-console-marketing\\src\\views\\cashInfo\\index.jsx",[],"D:\\operatingPlatform\\admin-console-marketing\\src\\views\\download\\index.jsx",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":57,"column":8,"nodeType":"62","endLine":57,"endColumn":10,"suggestions":"63"},{"ruleId":"60","severity":1,"message":"61","line":120,"column":8,"nodeType":"62","endLine":120,"endColumn":10,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":214,"column":13,"nodeType":"67","endLine":214,"endColumn":81},{"ruleId":"68","severity":1,"message":"69","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":23},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'queryData'. Either include it or remove the dependency array.","ArrayExpression",["74"],["75"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},{"desc":"76","fix":"78"},"Update the dependencies array to be: [queryData]",{"range":"79","text":"80"},{"range":"81","text":"80"},[1855,1857],"[queryData]",[3819,3821]]